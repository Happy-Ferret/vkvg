CMAKE_MINIMUM_REQUIRED(VERSION 3.9)

PROJECT(vkvg VERSION 0.1.0 DESCRIPTION "Vulkan Vector Graphic")

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake")
SET(CMAKE_CXX_FLAGS "-W -Wall")
SET(CMAKE_EXE_LINKER_FLAGS "-lm")

IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Release)
ENDIF()
MESSAGE(STATUS "${CMAKE_BUILD_TYPE} build.")

FIND_PACKAGE(Vulkan REQUIRED)
FIND_PACKAGE(GLFW3 REQUIRED)
FIND_PACKAGE(Freetype REQUIRED)
FIND_PACKAGE(FontConfig REQUIRED)

INCLUDE(FindPkgConfig)
INCLUDE(GNUInstallDirs)

PKG_CHECK_MODULES(PC_HARFBUZZ harfbuzz>=0.9.0)

FIND_PATH(HARFBUZZ_INCLUDE_DIRS NAMES hb.h
  HINTS ${PC_HARFBUZZ_INCLUDE_DIRS} ${PC_HARFBUZZ_INCLUDEDIR}
)

FIND_LIBRARY(HARFBUZZ_LIBRARIES NAMES harfbuzz
  HINTS ${PC_HARFBUZZ_LIBRARY_DIRS} ${PC_HARFBUZZ_LIBDIR}
)

INCLUDE(FindPackageHandleStandardArgs)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(HarfBuzz DEFAULT_MSG HARFBUZZ_INCLUDE_DIRS HARFBUZZ_LIBRARIES)


# Find glslc shader compiler.
# On Android, the NDK includes the binary, so no external dependency.
if(ANDROID)
	file(GLOB glslc-folders ${ANDROID_NDK}/shader-tools/*)
else()
	file(GLOB glslc-folders ${VULKAN_SDK}/bin)
endif()
FIND_PROGRAM(GLSLC glslc HINTS ${glslc-folders})
if(NOT GLSLC)
    message(FATAL_ERROR "glslc compiler not found!")
endif()

SET(SHADER_DIR "shaders")
SET(SHADER_FILES ${SHADER_DIR}/*.frag ${SHADER_DIR}/*.vert ${SHADER_DIR}/*.geom  ${SHADER_DIR}/*.comp)
FILE(GLOB_RECURSE SHADERS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${SHADER_FILES})
FOREACH(SHADER ${SHADERS})
	SET(shader-input ${CMAKE_CURRENT_SOURCE_DIR}/${SHADER})
	SET(shader-output ${CMAKE_CURRENT_BINARY_DIR}/${SHADER}.spv)
	ADD_CUSTOM_COMMAND (
	OUTPUT ${shader-output}
	  COMMAND ${CMAKE_COMMAND} -E make_directory "${CMAKE_CURRENT_BINARY_DIR}/${SHADER_DIR}"
	  COMMAND ${GLSLC} ${shader-input} -o ${shader-output}
	  COMMENT "Compiling ${shader-input}"
	  DEPENDS ${SHADER}
	  VERBATIM
	)
	SET(SHADER_OUTPUTS ${SHADER_OUTPUTS} ${shader-output})
ENDFOREACH()
ADD_CUSTOM_TARGET(CompileShaders ALL DEPENDS ${SHADER_OUTPUTS})

#add_definitions( -DDEBUG_VK_PERF=true )

FILE(GLOB VKVG_SRC src/*.c vkh/*.c)

ADD_LIBRARY(${PROJECT_NAME} SHARED ${VKVG_SRC} ${SHADERS})

SET_TARGET_PROPERTIES(vkvg PROPERTIES
        VERSION ${PROJECT_VERSION}
        SOVERSION 1
        PUBLIC_HEADER include/vkvg.h
)

TARGET_INCLUDE_DIRECTORIES(vkvg PRIVATE 
        ${CMAKE_CURRENT_SOURCE_DIR}/include
        ${CMAKE_CURRENT_SOURCE_DIR}/vkh
        ${CMAKE_CURRENT_SOURCE_DIR}/src
	${FREETYPE_INCLUDE_DIRS}
	${HARFBUZZ_INCLUDE_DIRS}
	${FONTCONFIG_INCLUDE_DIR}
)

TARGET_LINK_LIBRARIES(${PROJECT_NAME}
	${Vulkan_LIBRARY}
	${GLFW3_LIBRARY}
	${FREETYPE_LIBRARY}
	${HARFBUZZ_LIBRARIES}
	${FONTCONFIG_LIBRARIES}
)

CONFIGURE_FILE(vkvg.pc.in vkvg.pc @ONLY)
INSTALL(FILES ${CMAKE_BINARY_DIR}/vkvg.pc DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/pkgconfig)
INSTALL(TARGETS vkvg
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

